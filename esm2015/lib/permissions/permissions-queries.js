import { __awaiter } from "tslib";
import { GetTokenFromRequest } from './token-helper';
import { permsFactory } from './permissions.factory';
import { VError } from 'verror';
import { permHelper } from './permissions-helper';
function RetrieveFilePermissions(file) {
    return __awaiter(this, void 0, void 0, function* () {
        const fromStorage = yield permHelper.GetMetaPropertyObj(file, 'permissions');
        const blank = permsFactory.blankPermissionsObj();
        const safePerms = Object.assign(Object.assign({}, blank), (fromStorage || {}));
        return safePerms;
    });
}
function RetrieveCustomClaims(req) {
    return __awaiter(this, void 0, void 0, function* () {
        let token;
        try {
            token = yield GetTokenFromRequest(req);
        }
        catch (error) {
            console.log('No bearer token found on request, no permissions for user');
            return permsFactory.blankUserClaim();
        }
        const claims = token;
        if (!claims.groups) {
            claims.groups = [];
        }
        return claims;
    });
}
function TryCheckHasAnyPermissions(claims) {
    if (!claims.groups.length && !claims.userIsSudo) {
        throw new Error('No user permissions found, cannot change permissions');
    }
}
function CanRead(othersPermissions) {
    return (othersPermissions == null ||
        othersPermissions === 'read' ||
        othersPermissions === 'read/write');
}
function CanWrite(othersPermissions) {
    return othersPermissions === 'read/write';
}
function CanOthersDo(othersPermissions, toCheck) {
    switch (toCheck) {
        case 'read':
            return CanRead(othersPermissions);
        case 'write':
            return CanWrite(othersPermissions);
        default:
            break;
    }
}
function TryCheckFileAccess(filePermissions, claims, toCheck) {
    // Anyone can do something
    const anyoneCanDo = CanOthersDo(filePermissions.others, toCheck);
    if (anyoneCanDo) {
        return true;
    }
    // Has no userclaims
    const hasClaims = !!claims;
    if (!hasClaims) {
        return false;
    }
    // Sudo can do anything
    const sudoCanDo = claims.userIsSudo;
    if (sudoCanDo) {
        return true;
    }
    const userAndGroups = [...claims.groups, claims.user_id];
    let arrayToCheck;
    if (toCheck === 'read') {
        arrayToCheck = filePermissions.readers;
    }
    else {
        arrayToCheck = filePermissions.writers;
    }
    if (IsPartOfArray(arrayToCheck, userAndGroups)) {
        return true;
    }
    return false;
}
function IsPartOfArray(arr, usersGroups) {
    const hasNoGroupsToCheck = !usersGroups || !usersGroups.length;
    if (hasNoGroupsToCheck) {
        return false;
    }
    const userGroupSet = new Set(usersGroups);
    const isInArray = arr.find((entity) => userGroupSet.has(entity));
    return !!isInArray;
}
function CheckCanEditPermissions(currentFilePermissions, newPermissions, claims) {
    const canEditPermissions = TryCheckFileAccess(currentFilePermissions, claims, 'write');
    const canEditPermissionsAfter = TryCheckFileAccess(newPermissions, claims, 'write');
    if (!canEditPermissions) {
        throw new VError('Cannot edit permissions here');
    }
    if (!canEditPermissionsAfter) {
        throw new VError('Cannot change permissions, so you wont be able to change back');
    }
}
export const permsQueries = {
    RetrieveFilePermissions,
    RetrieveCustomClaims,
    TryCheckHasAnyPermissions,
    TryCheckFileAccess,
    IsPartOfArray,
    CheckCanEditPermissions,
};
//# sourceMappingURL=data:application/json;base64,