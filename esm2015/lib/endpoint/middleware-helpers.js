import { __awaiter } from "tslib";
const cors = require('cors');
export function OptionRequestsAreOk(req, res, next) {
    if (req.method === 'OPTIONS') {
        console.log('Recieved OPTIONS request sending OK');
        res.status(200).send('Options are OK\n');
        return;
    }
    next();
}
export function PostRequestsOnly(req, res, next) {
    if (req.method !== 'POST') {
        const msg = 'Only POST requests are supported\n';
        console.warn(msg);
        res.status(400).send(msg);
        return;
    }
    next();
}
export function HasBodyProp(bodyFieldName) {
    return (req, res, next) => {
        if (!req.body[bodyFieldName]) {
            const msg = `Request is missing property in req.body: "${bodyFieldName}" \n`;
            console.warn(msg);
            res.status(400).send(msg);
            return;
        }
        next();
    };
}
export function HasQueryParam(paramName) {
    return (req, res, next) => {
        if (!req.query[paramName]) {
            const msg = `Request is missing property in req.params: "${paramName}" \n`;
            console.warn(msg);
            res.status(400).send(msg);
            return;
        }
        next();
    };
}
export function AddCors(req, res, next) {
    return __awaiter(this, void 0, void 0, function* () {
        res.setHeader('Access-Control-Allow-Headers', 'Authorization, X-Requested-With, Accept, Content-Type, Origin, Cache-Control, X-File-Name');
        res.setHeader('Access-Control-Allow-Origin', '*');
        try {
            yield new Promise((resolve, reject) => {
                cors({ origin: true })(req, res, () => {
                    resolve();
                });
            });
            next();
        }
        catch (error) {
            throw new Error(error.message);
        }
    });
}
export function LogRequest(req, res, next) {
    const body = JSON.stringify(req.body || {}, null, 4).slice(0, 500);
    const msg = `
---- request: ${req.url}
method: ${req.method}
 query: ${JSON.stringify(req.query, null, 4)}
  body: ${body}
----`;
    console.log(msg);
    next();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlkZGxld2FyZS1oZWxwZXJzLmpzIiwic291cmNlUm9vdCI6Ii9Wb2x1bWVzL1NoaXZhbmcvUGkgU29mdHdhcmUvZmlsZS1tYW5hZ2VyL25neC1maWxlbWFuYWdlci9wcm9qZWN0cy9uZ3gtZmlsZW1hbmFnZXItYXBpLWZpcmViYXNlL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9lbmRwb2ludC9taWRkbGV3YXJlLWhlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUU3QixNQUFNLFVBQVUsbUJBQW1CLENBQ2pDLEdBQVksRUFDWixHQUFhLEVBQ2IsSUFBa0I7SUFFbEIsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBRTtRQUM1QixPQUFPLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7UUFDbkQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUN6QyxPQUFPO0tBQ1I7SUFDRCxJQUFJLEVBQUUsQ0FBQztBQUNULENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQzlCLEdBQVksRUFDWixHQUFhLEVBQ2IsSUFBa0I7SUFFbEIsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLE1BQU0sRUFBRTtRQUN6QixNQUFNLEdBQUcsR0FBRyxvQ0FBb0MsQ0FBQztRQUNqRCxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLE9BQU87S0FDUjtJQUNELElBQUksRUFBRSxDQUFDO0FBQ1QsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQUMsYUFBcUI7SUFDL0MsT0FBTyxDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0IsRUFBRSxFQUFFO1FBQ3pELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQzVCLE1BQU0sR0FBRyxHQUFHLDZDQUE2QyxhQUFhLE1BQU0sQ0FBQztZQUM3RSxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzFCLE9BQU87U0FDUjtRQUNELElBQUksRUFBRSxDQUFDO0lBQ1QsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsU0FBaUI7SUFDN0MsT0FBTyxDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0IsRUFBRSxFQUFFO1FBQ3pELElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3pCLE1BQU0sR0FBRyxHQUFHLCtDQUErQyxTQUFTLE1BQU0sQ0FBQztZQUMzRSxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzFCLE9BQU87U0FDUjtRQUNELElBQUksRUFBRSxDQUFDO0lBQ1QsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBZ0IsT0FBTyxDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0I7O1FBQzNFLEdBQUcsQ0FBQyxTQUFTLENBQ1gsOEJBQThCLEVBQzlCLDJGQUEyRixDQUM1RixDQUFDO1FBQ0YsR0FBRyxDQUFDLFNBQVMsQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNsRCxJQUFJO1lBQ0YsTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDcEMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUU7b0JBQ3BDLE9BQU8sRUFBRSxDQUFDO2dCQUNaLENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLEVBQUUsQ0FBQztTQUNSO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxNQUFNLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNoQztJQUNILENBQUM7Q0FBQTtBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsR0FBWSxFQUFFLEdBQWEsRUFBRSxJQUFrQjtJQUN4RSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ25FLE1BQU0sR0FBRyxHQUFHO2dCQUNFLEdBQUcsQ0FBQyxHQUFHO1VBQ2IsR0FBRyxDQUFDLE1BQU07VUFDVixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztVQUNsQyxJQUFJO0tBQ1QsQ0FBQztJQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakIsSUFBSSxFQUFFLENBQUM7QUFDVCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UsIE5leHRGdW5jdGlvbiwgUmVxdWVzdEhhbmRsZXIgfSBmcm9tICdleHByZXNzJztcbmNvbnN0IGNvcnMgPSByZXF1aXJlKCdjb3JzJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBPcHRpb25SZXF1ZXN0c0FyZU9rKFxuICByZXE6IFJlcXVlc3QsXG4gIHJlczogUmVzcG9uc2UsXG4gIG5leHQ6IE5leHRGdW5jdGlvblxuKTogUmVxdWVzdEhhbmRsZXIge1xuICBpZiAocmVxLm1ldGhvZCA9PT0gJ09QVElPTlMnKSB7XG4gICAgY29uc29sZS5sb2coJ1JlY2lldmVkIE9QVElPTlMgcmVxdWVzdCBzZW5kaW5nIE9LJyk7XG4gICAgcmVzLnN0YXR1cygyMDApLnNlbmQoJ09wdGlvbnMgYXJlIE9LXFxuJyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIG5leHQoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFBvc3RSZXF1ZXN0c09ubHkoXG4gIHJlcTogUmVxdWVzdCxcbiAgcmVzOiBSZXNwb25zZSxcbiAgbmV4dDogTmV4dEZ1bmN0aW9uXG4pOiBSZXF1ZXN0SGFuZGxlciB7XG4gIGlmIChyZXEubWV0aG9kICE9PSAnUE9TVCcpIHtcbiAgICBjb25zdCBtc2cgPSAnT25seSBQT1NUIHJlcXVlc3RzIGFyZSBzdXBwb3J0ZWRcXG4nO1xuICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICAgIHJlcy5zdGF0dXMoNDAwKS5zZW5kKG1zZyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIG5leHQoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhhc0JvZHlQcm9wKGJvZHlGaWVsZE5hbWU6IHN0cmluZyk6IFJlcXVlc3RIYW5kbGVyIHtcbiAgcmV0dXJuIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikgPT4ge1xuICAgIGlmICghcmVxLmJvZHlbYm9keUZpZWxkTmFtZV0pIHtcbiAgICAgIGNvbnN0IG1zZyA9IGBSZXF1ZXN0IGlzIG1pc3NpbmcgcHJvcGVydHkgaW4gcmVxLmJvZHk6IFwiJHtib2R5RmllbGROYW1lfVwiIFxcbmA7XG4gICAgICBjb25zb2xlLndhcm4obXNnKTtcbiAgICAgIHJlcy5zdGF0dXMoNDAwKS5zZW5kKG1zZyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG5leHQoKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhhc1F1ZXJ5UGFyYW0ocGFyYW1OYW1lOiBzdHJpbmcpOiBSZXF1ZXN0SGFuZGxlciB7XG4gIHJldHVybiAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pID0+IHtcbiAgICBpZiAoIXJlcS5xdWVyeVtwYXJhbU5hbWVdKSB7XG4gICAgICBjb25zdCBtc2cgPSBgUmVxdWVzdCBpcyBtaXNzaW5nIHByb3BlcnR5IGluIHJlcS5wYXJhbXM6IFwiJHtwYXJhbU5hbWV9XCIgXFxuYDtcbiAgICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICAgICAgcmVzLnN0YXR1cyg0MDApLnNlbmQobXNnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbmV4dCgpO1xuICB9O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gQWRkQ29ycyhyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikge1xuICByZXMuc2V0SGVhZGVyKFxuICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzJyxcbiAgICAnQXV0aG9yaXphdGlvbiwgWC1SZXF1ZXN0ZWQtV2l0aCwgQWNjZXB0LCBDb250ZW50LVR5cGUsIE9yaWdpbiwgQ2FjaGUtQ29udHJvbCwgWC1GaWxlLU5hbWUnXG4gICk7XG4gIHJlcy5zZXRIZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbicsICcqJyk7XG4gIHRyeSB7XG4gICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29ycyh7IG9yaWdpbjogdHJ1ZSB9KShyZXEsIHJlcywgKCkgPT4ge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBuZXh0KCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBMb2dSZXF1ZXN0KHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSB7XG4gIGNvbnN0IGJvZHkgPSBKU09OLnN0cmluZ2lmeShyZXEuYm9keSB8fCB7fSwgbnVsbCwgNCkuc2xpY2UoMCwgNTAwKTtcbiAgY29uc3QgbXNnID0gYFxuLS0tLSByZXF1ZXN0OiAke3JlcS51cmx9XG5tZXRob2Q6ICR7cmVxLm1ldGhvZH1cbiBxdWVyeTogJHtKU09OLnN0cmluZ2lmeShyZXEucXVlcnksIG51bGwsIDQpfVxuICBib2R5OiAke2JvZHl9XG4tLS0tYDtcbiAgY29uc29sZS5sb2cobXNnKTtcbiAgbmV4dCgpO1xufVxuIl19