import { __awaiter } from "tslib";
// Add middle ware to this route
const express = require('express');
import { OptionRequestsAreOk, PostRequestsOnly, HasBodyProp, HasQueryParam, AddCors, LogRequest } from './middleware-helpers';
import { NgxFileMangerApiFireBaseClass } from '../api/firebase-storage-api';
import { VError } from 'verror';
let fmApi;
let LOGGING = false;
const endpoint = express();
endpoint.use(AddCors);
endpoint.use(OptionRequestsAreOk);
endpoint.use((req, res, next) => {
    req.body.path = `${req.body._c_id}/${req.body.path}`;
    if (LOGGING) {
        LogRequest(req, res, next);
    }
    else {
        next();
    }
});
endpoint.use('/hello', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    console.log('HELLO');
    res.status(200).send('HELLO\n');
}));
endpoint.use(PostRequestsOnly);
import { ParseUploadFile } from './middleware-upload';
import { permsQueries } from '../permissions/permissions-queries';
endpoint.use('/upload', OptionRequestsAreOk, PostRequestsOnly, HasQueryParam('bucketname'), HasQueryParam('directoryPath'), ParseUploadFile, (req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
    const bucketname = req.query.bucketname;
    const directoryPath = req.query.directoryPath;
    try {
        const files = req.files;
        const userClaims = yield permsQueries.RetrieveCustomClaims(req);
        const results = yield Promise.all(files.map(file => trySaveFile(bucketname, directoryPath, file, userClaims)));
        const success = {
            result: {
                success: true
            }
        };
        const finalResult = results.reduce((acc, cur) => {
            if (cur.result.error) {
                return cur;
            }
            return success;
        }, success);
        res.status(200).send(finalResult);
    }
    catch (error) {
        console.error('Error occurred while uploading: \n', VError.fullStack(error));
        res
            .status(400)
            .send('Error occurred while uploading: \n' + error.message);
        return;
    }
}));
function trySaveFile(bucketname, directoryPath, f, userClaims) {
    return __awaiter(this, void 0, void 0, function* () {
        return fmApi.HandleSaveFile(bucketname, directoryPath, f.originalname, f.mimetype, f.buffer, userClaims);
    });
}
endpoint.use('/', HasBodyProp('action'), HasBodyProp('bucketname'), (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const action = req.body.action;
    try {
        const userClaims = yield permsQueries.RetrieveCustomClaims(req);
        let body;
        switch (action) {
            case 'list':
                body = yield fmApi.HandleList(req.body, userClaims);
                break;
            case 'rename':
                body = yield fmApi.HandleRename(req.body, userClaims);
                break;
            case 'move':
                body = yield fmApi.HandleMove(req.body, userClaims);
                break;
            case 'copy':
                body = yield fmApi.HandleCopy(req.body, userClaims);
                break;
            case 'remove':
                body = yield fmApi.HandleRemove(req.body, userClaims);
                break;
            case 'edit':
                body = yield fmApi.HandleEdit(req.body, userClaims);
                break;
            case 'getContent':
                body = yield fmApi.HandleGetContent(req.body, userClaims);
                break;
            case 'createFolder':
                body = yield fmApi.HandleCreateFolder(req.body, userClaims);
                break;
            case 'getSingle':
                body = yield fmApi.HandleGetSingle(req.body, userClaims);
                break;
            case 'changePermissions':
                body = yield fmApi.HandleSetPermissions(req.body, userClaims);
                break;
            case 'changePermissionsObject':
                body = yield fmApi.HandleSetPermissionsObject(req.body, userClaims);
                break;
            case 'compress':
            case 'extract':
            case 'downloadMultiple':
            default:
                throw new Error('action has not been implemented');
        }
        res.status(200).send(body);
    }
    catch (error) {
        console.error('Error while processing request: \n', VError.fullStack(error));
        const returnedError = {
            error: `Bad request to ngx-file-manager!`,
            errorDetail: error.message,
            requestBody: req.body
        };
        res.status(400).send(returnedError);
    }
}));
endpoint.use(notImplemented);
function notImplemented(req, res) {
    return __awaiter(this, void 0, void 0, function* () {
        const bodyString = JSON.stringify(req.body);
        res.status(501).send('That request has not been implemented: ' + bodyString);
    });
}
/*
Use by attaching to a firebase function
exports.FileManagerApi = StorageEndpoint;
*/
export const FileManagerEndpointExpress = (options) => {
    LOGGING = options.logging;
    fmApi = new NgxFileMangerApiFireBaseClass(options.storage);
    return endpoint;
};
//# sourceMappingURL=data:application/json;base64,