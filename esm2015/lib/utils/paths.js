import * as path from 'path';
function HasPrefixSlash(inputPath) {
    if (!inputPath || !inputPath.length) {
        return false;
    }
    const hasPrefix = inputPath.startsWith('/');
    return hasPrefix;
}
function HasTrailingSlash(inputPath) {
    if (!inputPath || !inputPath.length) {
        return false;
    }
    const hasTrailing = inputPath.endsWith('/');
    return hasTrailing;
}
function EnsureTrailingSlash(inputPath) {
    if (!inputPath) {
        return '/';
    }
    const hasTrailing = HasTrailingSlash(inputPath);
    const pathParsed = hasTrailing ? inputPath : inputPath + '/';
    return pathParsed;
}
function EnsureNoPrefixSlash(inputPath) {
    const hasPrefix = HasPrefixSlash(inputPath);
    const pathParsed = hasPrefix ? inputPath.slice(1) : inputPath;
    return pathParsed;
}
function EnsurePrefixSlash(inputPath) {
    if (!inputPath) {
        return '/';
    }
    const hasPrefix = HasPrefixSlash(inputPath);
    const pathParsed = hasPrefix ? inputPath : '/' + inputPath;
    return pathParsed;
}
function EnsureNoTrailingSlash(inputPath) {
    const hasTrailing = HasTrailingSlash(inputPath);
    const pathParsed = hasTrailing ? inputPath.slice(0, -1) : inputPath;
    return pathParsed;
}
function EnsureAbsolutePathFile(filePath) {
    return EnsurePrefixSlash(EnsureNoTrailingSlash(filePath));
}
function EnsureAbsolutePathDir(folderPath) {
    return EnsurePrefixSlash(EnsureTrailingSlash(folderPath));
}
function EnsureGoogleStoragePathDir(folderPath) {
    return EnsureNoPrefixSlash(EnsureTrailingSlash(folderPath));
}
function EnsureGoogleStoragePathFile(filePath) {
    return EnsureNoPrefixSlash(EnsureNoTrailingSlash(filePath));
}
function GetRelativePath(currentDirectoryPath, absObjectPath) {
    const relativePath = absObjectPath.slice(currentDirectoryPath.length);
    return relativePath;
}
function GetParentDir(currentDirectoryPath) {
    const parsed = EnsurePrefixSlash(currentDirectoryPath);
    const parentPath = path.dirname(parsed);
    return EnsureGoogleStoragePathDir(parentPath);
}
function IsCurrentPath(currentDirectoryPath, absObjectPath) {
    const relativePath = GetRelativePath(currentDirectoryPath, absObjectPath);
    const isCurrentDir = !relativePath;
    return isCurrentDir;
}
function IsCurrentPathFile(currentDirectoryPath, absObjectPath) {
    const relativePath = GetRelativePath(currentDirectoryPath, absObjectPath);
    const slashSegments = relativePath.split('/');
    const isCurrentPathFile = slashSegments.length < 2;
    return isCurrentPathFile;
}
function IsObjNameDir(storageObjectName) {
    const filePathParsed = EnsurePrefixSlash(storageObjectName);
    const isDir = HasTrailingSlash(filePathParsed);
    return isDir;
}
function IsObjNameFile(storageObjectName) {
    return !IsObjNameDir(storageObjectName);
}
function GetSubDirectory(currentDirectoryPath, absObjectPath) {
    const relativePath = GetRelativePath(currentDirectoryPath, absObjectPath);
    const slashSegments = relativePath.split('/');
    const subDirectory = slashSegments.shift();
    return subDirectory;
}
function Add2ToPath(inputPath) {
    const dotSegments = inputPath.split('.');
    const extension = dotSegments.pop();
    const fileName = dotSegments.join('.') + ' (2)' + '.' + extension;
    return fileName;
}
function Add2ToPathDir(inputPath) {
    const pathWithoutSlash = EnsureNoTrailingSlash(inputPath);
    const pathWith2 = pathWithoutSlash + ' (2)';
    const newDirName = EnsureTrailingSlash(pathWith2);
    return newDirName;
}
function GetFileNameWithExtension(inputPath) {
    const fileNameWithExt = inputPath.split('/').pop();
    return fileNameWithExt;
}
function GetFileNameWithoutExtension(inputPath) {
    const fileNameWithExt = GetFileNameWithExtension(inputPath);
    const segments = fileNameWithExt.split('.');
    segments.pop(); // remove extension
    return segments.join('.');
}
function GetPathUpToLastBracket(inputPath) {
    const slashes = inputPath.split('/');
    slashes.pop();
    const dirPath = slashes.join('/');
    const fileName = inputPath.slice(dirPath.length);
    const bracketSegments = fileName.split('(');
    bracketSegments.pop();
    const fileNameWith = bracketSegments.join('(');
    if (fileName.includes('(')) {
        const filepathWithBracket = path.join(dirPath, fileNameWith + '(');
        return filepathWithBracket;
    }
    const dotSegments = inputPath.split('.');
    if (dotSegments.length < 2) {
        return inputPath;
    }
    dotSegments.pop();
    return dotSegments.join('.');
}
export const paths = {
    HasPrefixSlash,
    HasTrailingSlash,
    EnsureTrailingSlash,
    EnsureNoPrefixSlash,
    EnsurePrefixSlash,
    EnsureNoTrailingSlash,
    EnsureAbsolutePathFile,
    EnsureAbsolutePathDir,
    EnsureGoogleStoragePathDir,
    EnsureGoogleStoragePathFile,
    GetRelativePath,
    IsCurrentPath,
    IsCurrentPathFile,
    IsObjNameDir,
    IsObjNameFile,
    GetSubDirectory,
    GetParentDir,
    GetFileNameWithExtension,
    GetFileNameWithoutExtension,
    GetPathUpToLastBracket,
    Add2ToPath,
    Add2ToPathDir
};
//# sourceMappingURL=data:application/json;base64,