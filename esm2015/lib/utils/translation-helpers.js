import { __awaiter } from "tslib";
import * as path from 'path';
import { VError } from 'verror';
import { perms } from '../permissions';
import { paths } from './paths';
export function translateRawStorage(storageObject) {
    const filePath = storageObject.name;
    const filePathParsed = paths.EnsurePrefixSlash(filePath);
    return {
        ref: storageObject,
        name: path.basename(filePathParsed),
        fullPath: filePathParsed,
        isDir: paths.HasTrailingSlash(filePathParsed)
    };
}
export function makePhantomStorageFolder(folderPath) {
    const pathParsed = paths.EnsureAbsolutePathDir(folderPath);
    return {
        ref: null,
        name: path.basename(pathParsed),
        fullPath: pathParsed,
        isDir: true,
        isPhantomFolder: true
    };
}
export function translateStorageToResFile(f) {
    return __awaiter(this, void 0, void 0, function* () {
        const resFile = {};
        resFile.name = f.name;
        if (f.isDir) {
            resFile.type = 'dir';
            resFile.fullPath = paths.EnsureAbsolutePathDir(f.fullPath);
        }
        else {
            resFile.type = 'file';
            resFile.fullPath = paths.EnsureAbsolutePathFile(f.fullPath);
        }
        if (f.isPhantomFolder) {
            resFile.permissions = perms.factory.blankPermissionsObj();
            resFile.isPhantomFolder = true;
            return resFile;
        }
        try {
            const [exists] = yield f.ref.exists();
            if (!exists) {
                throw new Error('File not found: ' + resFile.fullPath);
            }
            const [aclObj] = yield f.ref.acl.get();
            resFile.rightsFirebase = aclObj;
            const metaResp = yield f.ref.getMetadata();
            const metaData = metaResp[0];
            const customMeta = metaData.metadata || {};
            const permissions = yield perms.queries.RetrieveFilePermissions(f.ref);
            resFile.permissions = permissions;
            resFile.size = metaData.size;
            resFile.date = metaData.updated;
            resFile.metaData = customMeta;
            return resFile;
        }
        catch (error) {
            throw new VError(error);
        }
    });
}
export function StreamToPromise(stream) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            let stringRes;
            stream.on('readable', function (buffer) {
                const part = buffer.read().toString();
                stringRes += part;
                console.log('stream data ' + part);
            });
            stream.on('end', res => {
                resolve(stringRes);
            });
            stream.on('error', err => {
                const errmsg = 'StreamToPromise(stream: Readable), Error reading stream: ' +
                    err.message;
                console.error(errmsg, { err });
                reject(errmsg);
            });
        });
    });
}
export function getResult(res) {
    const fail = res.statusCode !== 204;
    return {
        success: !fail,
        error: fail ? 'error: ' + res.body : null
    };
}
export function getResultFromArray(res) {
    const fail = res.find(r => r.statusCode !== 204);
    return {
        success: !fail,
        error: fail ? 'error: ' + JSON.stringify(fail.body) : null
    };
}
export function ResultsObjFromArray(moveResults) {
    return moveResults.reduce((acc, cur) => {
        if (cur.error) {
            acc.error += ' | ' + cur.error;
            acc.success = false;
        }
        return acc;
    }, { error: '', success: true });
}
//# sourceMappingURL=data:application/json;base64,